#+Author: Alex Rosegrid
#+Title: Emacs Configuration
#+Startup: show3levels indent

#+PROPERTY: EMACS_CONFIG_DIR .dotfiles/.emacs.d/

* Early Init Settings
:PROPERTIES:
:header-args:emacs-lisp: :tangle (concat (org-entry-get nil "EMACS_CONFIG_DIR" t) "early-init.el")
:END:

** Unclutter the GUI

This is the bare minimum customization needed to make =emacs= bearable, really. Instead of a weird
logo on a white screen with ugly horizontal and vertical bars, you get a simple white screen
instead.
/And, I guess, it enables line truncation, since I, *personally*, don't like visual lines much; oh,
and it disables cursor blinking too./

#+begin_src emacs-lisp
  (visual-line-mode -1)
  (setq-default fill-column 110)
  (setq-default truncate-lines t)
  (setq-default blink-cursor-mode nil)
  (setq-default inhibit-startup-screen t)

  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src


** (Possibly Placebo) Quick Start

*** Precompute Activation Actions
This requires running =package-quickstart-refresh= and/or =package-refresh-contents= every now and
then.
#+begin_src emacs-lisp
  (setq package-quickstart t)
#+end_src

*** Garbage Collector Tweaks
#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 64 1000 1000))
  (setq read-process-output-max (* 1024 1024))
#+end_src


** A More /vim like/ Experience

The first line keeps the text in the page from jumping around while scrolling, and the second one
shows at least some of the keystrokes in the ~echo-area~.

#+begin_src emacs-lisp
  (setq scroll-conservatively 101)
  (setq echo-keystrokes .1)
#+end_src


** Miscellaneous

Don't want backup files with weird names, and *probably* useless docstring warnings
#+begin_src emacs-lisp
  (setq make-backup-files nil
        native-comp-async-report-warnings-errors 'silent
        byte-compile-warnings '(not docstrings))
#+end_src
For Emacs 30+, disable ispell completion (Conflicts with =corfu=)
#+begin_src emacs-lisp
  (setq text-mode-ispell-word-completion nil)
#+end_src
Supress the  =org-element= warnings (these seem to be some sort of bug)
#+begin_src emacs-lisp
  (use-package warnings
    :config
    (add-to-list 'warning-suppress-log-types
                 '(org-element org-element-parser)))
#+end_src


** Tab Size
#+begin_src emacs-lisp
  (setq-default tab-width 4)
#+end_src


* Init Settings
:PROPERTIES:
:header-args:emacs-lisp: :tangle (concat (org-entry-get nil "EMACS_CONFIG_DIR" t) "init.el")
:END:

** Add the MELPA Repository

#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
#+end_src


** Some Quality of Life Features

*** Use User's Shell Environment
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :init
    (exec-path-from-shell-initialize))
#+end_src

*** Recentf Mode
#+begin_src emacs-lisp
  (recentf-mode 1)
  (global-set-key "\C-xf" 'recentf-open-files)
#+end_src

*** Buffer Switching Keybinds
#+begin_src emacs-lisp
  (global-set-key "\C-xwb" 'switch-to-buffer-other-window)
#+end_src

*** Pairing
For =prog-mode= disabled =electric-pair-mode=
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook
  	  (lambda()
  	    (electric-pair-local-mode -1)))
#+end_src
and use =smartparens-mode=
#+begin_src emacs-lisp
  (use-package smartparens
    :ensure t
    :hook  (prog-mode latex-mode)
    :config
    (require 'smartparens-config)
    (sp-with-modes 'sh-mode
      (sp-local-pair "[" "]"   :actions '(wrap insert navigate))
      (sp-local-pair "[ " " ]" :actions '(wrap insert navigate)))
    (sp-local-pair 'prog-mode "{" nil :post-handlers '(("||\n[i]" "RET"))))
#+end_src

*** Line Numbering
#+begin_src emacs-lisp
  (defun pref/set-line-number-mode()
    (setq display-line-numbers-type 'relative)
    (display-line-numbers-mode))
  (add-hook 'prog-mode-hook 'pref/set-line-number-mode)
  (add-hook 'latex-mode-hook 'pref/set-line-number-mode)
  (add-hook 'conf-mode-hook 'pref/set-line-number-mode)

  (setq column-number-mode t)
#+end_src

*** Auto Revert Mode
#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
#+end_src

*** Case Sensitivity
#+begin_src emacs-lisp
  (setq read-file-name-completion-ignore-case t
        read-buffer-completion-ignore-case    t)
#+end_src

*** Better Terminal
#+begin_src emacs-lisp
  (use-package vterm
    :ensure t
    :init
    (defun pref/new-terminal()
      (interactive)
      (split-window-below)
      (other-window 1)
      (vterm)
      (rename-uniquely))
    :bind
    ("C-c t" . pref/new-terminal))
#+end_src

*** Better PDF Tooling
#+begin_src emacs-lisp
  (use-package pdf-tools
    :ensure t
    :hook   (doc-view-mode . pdf-tools-install))
#+end_src

*** Completion and Hints
Vertico, to get a vertical list of available commands
#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :defer  t
    :init
    (vertico-mode))
#+end_src
Marginalia, to get relevant hints/annonations about the commands.
#+begin_src emacs-lisp
  (use-package marginalia
    :ensure t
    :bind
    (:map minibuffer-local-map
          ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))
#+end_src
Corfu, for auto completion popups
#+begin_src emacs-lisp
  (use-package corfu
    :ensure t
    :after  orderless
    :custom
    (corfu-cycle t)
    :init
    (global-corfu-mode)
    :config
    (setq corfu-auto           t
  	    corfu-on-exact-match nil)
    (keymap-unset corfu-map "RET"))
#+end_src
Yasnippet, for snippets
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :hook ((prog-mode  . yas-minor-mode)
           (org-mode   . yas-minor-mode)
  	     (latex-mode . yas-minor-mode))
    :config
    (define-key yas-minor-mode-map (kbd "<tab>") nil)
    (define-key yas-minor-mode-map (kbd "TAB") nil)
    (define-key yas/keymap         (kbd "TAB") nil)
    (define-key yas/keymap         (kbd "<backtab>") nil)
    (define-key yas-minor-mode-map (kbd "C-<tab>") #'yas-expand)
    (define-key yas/keymap         (kbd "C-j") #'yas-next-field)
    (define-key yas/keymap         (kbd "C-S-j") #'yas-prev-field)
    (yas-reload-all))
  (use-package yasnippet-snippets
    :ensure t
    :after yasnippet)
#+end_src
Hippie Expansion: mostly for file name expansion
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c c e") 'hippie-expand)
#+end_src

*** Orderless
#+begin_src emacs-lisp
  (use-package orderless
    :ensure t
    :defer  t
    :custom
    (completion-category-defaults    nil)
    (completion-styles             '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion))))
    :config
    (setq	orderless-component-separator "[- ]"))
#+end_src

*** Navigation Enhancement
#+begin_src emacs-lisp
  (use-package consult
    :ensure t
    :bind
    ("C-c c b" . consult-buffer)
    ("C-c c w" . consult-buffer-other-window)
    ("C-c c /" . consult-ripgrep)
    ("C-c c i" . consult-imenu))
  (add-hook 'org-mode-hook
  	  (lambda()
  	    (local-set-key (kbd "C-c c o") 'consult-outline)))
#+end_src
Swap =isearch= with =isearch-regexp=
#+begin_src emacs-lisp
  (global-set-key (kbd "C-s") 'isearch-forward-regexp)
  (global-set-key (kbd "C-r") 'isearch-backward-regexp)
#+end_src

*** Vim Layer
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t
          evil-want-keybinding  nil
  	evil-undo-system #'undo-redo)
    :config
    (evil-mode 1))
#+end_src
To make the integration a bit better,
#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init)
    (evil-define-key 'normal org-mode-map (kbd "gj") 'evil-next-visual-line)
    (evil-define-key 'normal org-mode-map (kbd "gk") 'evil-previous-visual-line))
#+end_src
Vim surround emulation
#+begin_src emacs-lisp
  (use-package evil-surround
    :after evil
    :ensure t
    :config
    (global-evil-surround-mode 1))
#+end_src

Set some sane default modes
#+begin_src emacs-lisp
  (require 'compile)
  (require 'vterm)
  (setq prefs/evil-emacs-state-modes
        '(minibuffer-mode
  	    minibuffer-inactive-mode
  	    messages-buffer-mode
  	    Buffer-menu-mode
  	    haskell-mode
  	    help-mode
  	    compilation-mode
          emacs-lisp-mode
  	    lisp-mode
  	    dired-mode
  	    vterm-mode
          eshell-mode
          nix-repl-mode
  	    inferior-python-mode
          jupyter-repl-mode
  	    fundamental-mode))
  (setq evil-normal-state-modes '(prog-mode)
        evil-insert-state-modes  nil
        evil-emacs-state-modes   (append prefs/evil-emacs-state-modes
  				                       evil-emacs-state-modes))
#+end_src

*** LSP Mode
#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :custom
    (lsp-completion-provider :none)
    :init
    (defun myLsp/orderless-dispatch-flex-first(_pattern index _total)
      (and (eq index 0) 'orderless-flex))
    
    (defun myLsp/lsp-mode-setup-completion()
      (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
  	  '(orderless))
      (add-hook 'orderless-style-dispatchers #'myLsp/orderless-dispatch-flex-first nil 'local))
    
    :hook
    (lsp-completion-mode . myLsp/lsp-mode-setup-completion)
    
    (c-mode         . lsp-deferred)
    (c-ts-mode      . lsp-deferred)
    (haskell-mode   . lsp-deferred)
    (c++-mode       . lsp-deferred)
    (c++-ts-mode    . lsp-deferred)
    (java-ts-mode   . lsp-deferred)
    (lua-mode       . lsp-deferred)
    (python-mode    . lsp-deferred)
    (python-ts-mode . lsp-deferred)
    (latex-mode     . lsp-deferred)
    (web-mode       . lsp-deferred)
    (js-mode        . lsp-deferred)
    (js-ts-mode     . lsp-deferred)
    
    :config
    (setq-default lsp-rename-use-prepare nil
                  lsp-enable-indentation nil)

    :custom
    (lsp-rust-analyzer-cargo-watch-command "clippy")
    (lsp-eldoc-render-all t))
#+end_src
Additional UI features
#+begin_src emacs-lisp
  (use-package lsp-ui
    :ensure t
    :after  lsp-mode
    :config
    (setq lsp-ui-doc-show-with-mouse  nil
  	lsp-ui-doc-show-with-cursor t
  	lsp-ui-doc-delay            0.5
  	lsp-ui-sideline-enable      nil
  	lsp-eldoc-enable-hover      nil))
#+end_src
**** Some languages seem to require their own lsp packages
***** Python
#+begin_src emacs-lisp
  (use-package lsp-pyright
    :ensure t
    :defer  t)
#+end_src
***** Haskell
#+begin_src emacs-lisp
  (use-package lsp-haskell
    :ensure t
    :defer  t)
#+end_src
***** LaTeX
#+begin_src emacs-lisp
  (use-package lsp-latex
    :ensure t
    :defer  t)
#+end_src

*** Magit
#+begin_src emacs-lisp
    (use-package magit
      :ensure t
      :defer  t)
#+end_src

*** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :bind ("C-c p" . projectile-command-map))
#+end_src

*** Rainbows
Mainly for emacs lisp, but the delimitors work for other languages too
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :hook prog-mode)
  (use-package rainbow-identifiers
    :ensure t
    :hook emacs-lisp-mode)
#+end_src

*** Tab Bar Autoclosing
#+begin_src emacs-lisp
  (defun myTabs/hide-tab-bar-if-alone ()
    (interactive)
    (tab-bar-close-tab)
    (when (<= (length (tab-bar-tabs)) 1)
      (tab-bar-mode -1)))

  (global-set-key (kbd "C-x t 0") 'myTabs/hide-tab-bar-if-alone)
#+end_src

*** Kebinding to Kill the Server
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x M-q") 'save-buffers-kill-emacs)
#+end_src


** File Extension Matching
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.latex\\'" . latex-mode))
#+end_src


** Tramp Settings
Never save authentication sources
#+begin_src emacs-lisp
  (setq auth-source-save-behavior nil)
#+end_src


** UI Settings

*** A (Fairly) Good looking theme
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bold   t
          doom-themes-enable-italic t)
    (set-face-italic 'font-lock-comment-face t)
    (load-theme 'doom-tokyo-night t)
    (doom-themes-org-config)
    (set-face-foreground 'font-lock-property-name-face "#6dcec0")
    (set-face-foreground 'font-lock-delimiter-face "SkyBlue3")
    (set-face-foreground 'font-lock-type-face "#2698b0")
    (set-face-attribute 'font-lock-keyword-face nil :slant 'italic)
    (set-face-attribute 'font-lock-function-call-face nil :slant 'italic)
    (with-eval-after-load 'org
      (set-face-foreground 'org-level-3 "Skyblue")))
#+end_src

*** Font
#+begin_src emacs-lisp
  (custom-set-faces
   '(default ((t (:family "JetBrains Mono" :foundry "JB" :slant normal :weight regular :height 143 :width normal)))))
#+end_src

*** A Better Looking Modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init
    (doom-modeline-mode 1))
  (use-package all-the-icons
    :ensure t
    :after  doom-modeline)
#+end_src

*** Indent Highlighting
#+begin_src emacs-lisp
  (use-package indent-bars
    :ensure t
    :hook
    (prog-mode-hook . indent-bars-mode)
    :config
    (setq indent-bars-color '(highlight :face-bg t :blend 0.15)
  		indent-bars-pattern "."
  		indent-bars-width-frac 0.1
  		indent-bars-pad-frac 0.1
  		indent-bars-zigzag nil
  		indent-bars-color-by-depth '(:regexp "outline-\\([0-9]+\\)" :blend 1)
  		indent-bars-highlight-current-depth '(:blend 0.5)
  		indent-bars-display-on-blank-lines t))
#+end_src

*** Emoji Support
#+begin_src emacs-lisp
  (use-package emojify
    :ensure t
    :hook ((org-mode  . emojify-mode)
           (text-mode . emojify-mode)
           (web-mode  . emojify-mode)))
#+end_src


** LaTeX Mode
*** Enable Flyspell
#+begin_src emacs-lisp
  (add-hook 'latex-mode-hook 'flyspell-mode)
#+end_src
*** Get LaTeX Project Root
All my LaTeX projects have a =cfg.cfg= file in their root directories
#+begin_src emacs-lisp
  (defun myLaTeX/is-project-root(directory counter)
    (if (file-exists-p (concat directory "cfg.cfg"))
        directory
      (if (< counter 3)
  	(myLaTeX/is-project-root (file-name-parent-directory directory) (+ 1 counter))
        nil)))

  (defun myLaTeX/get-project-root()
    (myLaTeX/is-project-root (file-name-directory buffer-file-name) 1))
#+end_src
*** Single File Compilation
#+begin_src emacs-lisp
  (defvar myLaTeX/main-tex-file nil)
  (defun myLaTeX/set-main-tex-file()
    (interactive)
    (setq myLaTeX/main-tex-file (file-relative-name buffer-file-name))
    (remove-hook 'latex-mode-hook 'myLaTeX/set-main-tex-file))
  (add-hook 'latex-mode-hook 'myLaTeX/set-main-tex-file)

  (defun myLaTeX/single-file-compile()
    (interactive)
    (save-window-excursion
      (async-shell-command (concat "latexmk -quiet -lualatex -f -auxdir=$HOME/.texbuild/ -outdir=pdf/ "
  				 myLaTeX/main-tex-file))))
#+end_src
*** Full Project Compilation
#+begin_src emacs-lisp
  (defun myLaTeX/project-complie()
    (interactive)
    (save-window-excursion
      (async-shell-command (concat (concat "cd " (myLaTeX/get-project-root)) " && mktex"))))
#+end_src
*** Open PDF in Zathura
#+begin_src emacs-lisp
  (defun myLaTeX/choose-file()
    (interactive)
    (read-file-name "Which PDF? "
  		  (concat (myLaTeX/get-project-root) "pdf/")))

  (defun myLaTeX/open-pdf-zathura()
    (interactive)
    (save-window-excursion
      (async-shell-command (concat "zathura --fork "
  				 (myLaTeX/choose-file)))))
#+end_src

*** Keybindings
#+begin_src emacs-lisp
  (add-hook 'latex-mode-hook
  	  (lambda()
  	    (local-set-key (kbd "C-c l r") 'myLaTeX/set-main-tex-file)
  	    (local-set-key (kbd "C-c l c") 'myLaTeX/single-file-compile)
  	    (local-set-key (kbd "C-c l m") 'myLaTeX/project-complie)
  	    (local-set-key (kbd "C-c l z") 'myLaTeX/open-pdf-zathura)))
#+end_src


** Org Mode
*** Performance Improvements
Otherwise, at least on my system, entering text in the code blocks is *slow*.
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
            (lambda() (setq jit-lock-defer-time 0.15)))
#+end_src

*** LaTeX Export Settings
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
            (lambda()
              (setq org-latex-src-block-backend 'listings
                    org-latex-listings-options  '(("numbers" "left")
                                                  ("breaklines" "true")
                                                  ("upquote" "true")
                                                  ("autogobble" "true")
                                                  ("showstringspaces" "false")
                                                  ("basicstyle" "\\ttfamily")))))
#+end_src

*** LaTeX Preview Settings
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
            (lambda()
              (setq org-preview-latex-default-process 'dvipng
                    org-startup-with-latex-preview     t
                    org-format-latex-options           (plist-put org-format-latex-options :scale 2.0))))
#+end_src

*** Org Babel Settings
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
            (lambda()
              (org-babel-do-load-languages
               'org-babel-load-languages '((emacs-lisp . t)
                                           (C . t)
                                           (shell . t)
                                           (python . t)
                                           (lua . t)))))
#+end_src
For languages that probably can't affect the system much, I'd rather not have to confirm every time
#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate
        (lambda (lang body)
          (not (string= lang "jupyter-python"))))
#+end_src

*** Appearance
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :hook (org-mode . org-bullets-mode))
#+end_src
 #+begin_src emacs-lisp
   (add-hook 'org-mode-hook
             (lambda()
               (setq org-startup-indented  t)))
#+end_src
#+begin_src emacs-lisp
  (use-package olivetti
    :ensure t
    :config
    (setq-default olivetti-body-width 120)
    :hook (org-mode
           markdown-mode))
#+end_src


** Programming

*** Packages for Other Programming Major Modes
#+begin_src emacs-lisp
  (use-package lua-mode
    :ensure t
    :defer  t)

  (use-package haskell-mode
    :ensure t
    :defer  t
    :config
    (setq lsp-haskell-plugin-rename-config-cross-module t))

  (use-package rustic
    :ensure t
    :defer  t
    :bind (:map rustic-mode-map
  			  ("M-?"       . lsp-find-reference)
  			  ("C-c C-c s" . lsp-rust-analyzer-status))
    :config
    (setq lsp-eldoc-hook                 nil
  		lsp-enable-symbol-highlighting nil
  		lsp-signature-auto-activate    nil))

  (use-package portage-modes
    :ensure t
    :defer  t)

  (use-package nix-mode
    :ensure t
    :defer  t)

  (use-package csv-mode
    :ensure t
    :defer t)

  (add-to-list 'load-path "~/.emacs.d/src/ebuild-mode")
  (add-to-list 'auto-mode-alist
               '("\\.ebuild\\'" . (lambda ()
                                    (require 'ebuild-mode)
                                    (ebuild-mode))))
#+end_src

*** HTML Settings
**** Web Mode
#+begin_src emacs-lisp
  (use-package web-mode
    :ensure t
    :hook (html-mode . web-mode)
    :config
    (setq web-mode-markup-indent-offset 4
          web-mode-css-indent-offset    4
          web-mode-code-indent-offset   4))
#+end_src
**** Set Indentation to 4 Spaces
#+begin_src emacs-lisp
  (setq sgml-basic-offset 4)
#+end_src
**** Emmet Templating
#+begin_src emacs-lisp
  (use-package emmet-mode
    :ensure t
    :hook
    (web-mode  . emmet-mode)
    (css-mode  . emmet-mode)
    :config
    (setq emmet-self-closing-tag-style "")
    (remhash "!!!" (gethash "snippets" (gethash "html" emmet-snippets)))
    (puthash "!!!" "<!DOCTYPE html>" (gethash "snippets" (gethash "html" emmet-snippets))))
#+end_src
**** Live Server Keybind
#+begin_src emacs-lisp
  (defun myWeb/launch-live-server ()
    (interactive)
    (save-window-excursion
  	(async-shell-command "live-server")))

  (add-hook 'web-mode-hook
  		  (lambda()
  			(local-set-key (kbd "C-c w ls") 'myWeb/launch-live-server)))
#+end_src
**** Save on Switching to Normal Mode
Because this seemed like an appropriate point to update live server
/evidently, it only looks at saved files/
#+begin_src emacs-lisp
  (add-hook 'evil-normal-state-entry-hook
  		  (lambda ()
  			(if (or (eq major-mode 'web-mode)
                      (eq major-mode 'css-ts-mode))
  				(save-buffer))))
#+end_src

*** C Family Settings
**** Indentation
#+begin_src emacs-lisp
  (add-hook 'c-mode-hook
            (lambda()
              (setq c-indentation-style 'k&r
                    c-basic-offset       4)))
#+end_src
**** Major Mode for CMake
#+begin_src emacs-lisp
  (use-package cmake-mode
    :ensure t
    :defer t)
#+end_src

*** General Programming Key Binds
**** Run Compile Command
#+begin_src emacs-lisp
  (defun myProg/compile()
    (interactive) (compile compile-command))
  (add-hook 'prog-mode-hook (lambda() (local-set-key (kbd "C-c r c") 'myProg/compile)))
#+end_src
**** Split Window and Open a new Treminal

*** Python Settings
**** ELPY
#+begin_src emacs-lisp
  (use-package elpy
    :ensure t
    :hook ((python-mode    . elpy-enable)
           (python-ts-mode . elpy-enable))
    :config
    (setenv "WORKON_HOME" "~/.venvs")
    (delete 'elpy-module-highlight-indentation elpy-modules)
    :init
    (add-hook 'python-ts-mode-hook
              (lambda () (elpy-mode 1))))
#+end_src
Deleting the =company= module doesn't seem to work well, so,
#+begin_src emacs-lisp
  (add-hook 'elpy-mode-hook
            (lambda() (company-mode -1)))
#+end_src
Sometimes, I use =conda= based venvs, while sometimes, I use the standard python venvs.
This should provide an easy way to switch between the two; or, optionally, to any other arbitrary
environment directory.
#+begin_src emacs-lisp
  (defun myProg/switch-workon-dir(&optional workon-home)
    (interactive)
    (if workon-home
        (setenv "WORKON_HOME" workon-home)
      (if (string-equal (getenv "WORKON_HOME") "~/.venvs")
          (setenv "WORKON_HOME" "~/.opt/miniconda3/envs")
        (setenv "WORKON_HOME" "~/.venvs")))
    (message "Switched to %s" (getenv "WORKON_HOME")))

  (global-set-key (kbd "C-c r w") 'myProg/switch-workon-dir)
#+end_src

**** Jupyter
#+begin_src emacs-lisp
  (use-package zmq
    :ensure t
    :defer t)
  (use-package simple-httpd
    :ensure t
    :defer t)
  (use-package websocket
    :ensure t
    :defer t)

  (use-package jupyter
    :ensure t
    :after (zmq simple-http websocket))
#+end_src
A quick function to activate the relevant conda environment, and then append jupyter to org-babel.
This was done under the assumption that the =jupyter= program itself should be available
for org-babel to recognise the =jupyter= src type.
#+begin_src emacs-lisp
  (defun myPython/activate-conda-env(&optional conda-env)
    (interactive)
    (if conda-env
        (pyvenv-activate conda-env)
      (progn (myProg/switch-workon-dir "~/.opt/miniconda3/envs")
             (call-interactively 'pyvenv-workon)))
    (org-babel-do-load-languages 'org-babel-load-languages
                                 (append org-babel-load-languages
                                         '((jupyter . t))))
    (normal-mode))
#+end_src

*** Java Settings
#+begin_src emacs-lisp
  (defun myJava/insert-compile-command()
    (interactive)
    (insert (concat "javac " (file-relative-name buffer-file-name))))
  (add-hook 'java-ts-mode-hook (lambda() (local-set-key (kbd "C-c r C") 'myJava/insert-compile-command)))
#+end_src

*** Treesitter Settings
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook
            (lambda()
              (setq treesit-font-lock-level 4
                    c-ts-mode-indent-style 'k&r
                    c-ts-mode-indent-offset 4)))
#+end_src
Treesitter package install sources
#+begin_src emacs-lisp
  (setq treesit-language-source-alist
        '((cpp "https://github.com/tree-sitter/tree-sitter-cpp")
          (c "https://github.com/tree-sitter/tree-sitter-c")
          (bash "https://github.com/tree-sitter/tree-sitter-bash")
          (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
          (css "https://github.com/tree-sitter/tree-sitter-css")
          (python "https://github.com/tree-sitter/tree-sitter-python")))
#+end_src
Remap major modes to tree sitter counterparts
#+begin_src emacs-lisp
  (setq major-mode-remap-alist
        '((c-mode          . c-ts-mode)
          (c++-mode        . c++-ts-mode)
          (bash-mode       . bash-ts-mode)
          (javascript-mode . js-ts-mode)
          (css-mode        . css-ts-mode)
          (python-mode     . python-ts-mode)))
#+end_src

*** Use Spaces for Indentation
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook
            (lambda() (indent-tabs-mode -1)))
#+end_src
But, we don't want this for Makefiles
#+begin_src emacs-lisp
  (add-hook 'makefile-gmake-mode-hook
            (lambda() (indent-tabs-mode 1)))
#+end_src

